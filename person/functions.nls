; FILE FOR PERSON'S FUNCTIONS

to person-act 
	if state = 0 [
		if random 100 < item 1 item int time prob_of_service [
			span_from_gaussian_mixture 0 0 -1 gm_org	

			; Changing his status
			set_state_person 1

			; Selecting a different vertice
			set destination place_from_gaussian_mixture 0 0 -1 gm_dest
		]
	]
end

to get-in
	set_state_person 2
	hide-turtle
end

to get-out
	set_state_person 0
	set current_vertice destination
	move-to destination
	show-turtle
end

;----------- decision rule -------------
to-report uber? [current_person]
	let uber 0
	let taxi 0

	; calculating the heutistic for history ---------------
	let uber-hist 0
	let taxi-hist 0
	let i 0
	let n length [history_uber] of current_person
	repeat n [
		set uber-hist uber-hist + item i [history_uber] of current_person / ( i + 1 ) ^ 2
		set i i + 1
		if perfect_memory [set i 0]
	]

	set i 0
	set n length [history_taxi] of current_person
	repeat n [
		set taxi-hist taxi-hist + item i [history_taxi] of current_person / ( i + 1 ) ^ 2
		set i i + 1
		if perfect_memory [set i 0]
	]

	; regularizing results
	ifelse taxi-hist > uber-hist [
		; in order to avoid dividing by zero
		ifelse taxi-hist = 0 [
			set uber-hist 0
		][
			set uber-hist 1 - (uber-hist / taxi-hist)
		]
		set taxi-hist 0
	][
		ifelse taxi-hist = uber-hist [
			set uber-hist 0
			set taxi-hist 0
		][
			; in order to avoid dividing by zero
			ifelse uber-hist = 0 [
				set taxi-hist 0
			][
				set taxi-hist 1 - (taxi-hist / uber-hist)
			]
			set uber-hist 0
		]
	]
	; -----------------------------------------------------


	; calculating familiarity heuristic (close people)-----
	let social_circle sort people with [distance current_person <= SOCIAL_CIRCLE_RADIUS and length services_type_history > 0]
	if SOCIAL_CIRCLE_RADIUS = 0 [set social_circle []]
	let familiarity_circle 0
	foreach social_circle [[close] ->
		if length [services_type_history] of close > 0 [
			set familiarity_circle familiarity_circle + ( first [services_type_history] of close / length social_circle )
		]
	]
	; -----------------------------------------------------

	; calculating familiarity heuristic (last service)-----
	let familiarity_last 0
	let n_last_services NUMBER_LAST_SERVICES
	if n_last_services > length services_type_history [set n_last_services length services_type_history]
	set i 0
	repeat n_last_services [
		set familiarity_last ( item i services_type_history / n_last_services )	+ familiarity_last
		set i i + 1
	]
	; -----------------------------------------------------

	; calculating price heuristic -------------------------
	; -----------------------------------------------------

	; adding all together ---------------------------------
	set uber uber-hist + familiarity_last + familiarity_circle
	set taxi taxi-hist + ( n_last_services - familiarity_last ) + ( length social_circle - familiarity_circle )
	; -----------------------------------------------------

	ask current_person [
		set uber_history_value uber-hist
		set taxi_history_value taxi-hist
		set familiarity_circle_value familiarity_circle
		set familiarity_last_value familiarity_last
		set uber_fn uber
		set taxi_fn taxi
	]

	ifelse uber > taxi [
		report true
	][
		ifelse uber = taxi [
			; if tie chose randomly
			report one-of [true false]
		][
			report false
		]
	]
end

;----------- set_state_persons ---------
to set_state_person [value]
	if state = 1 AND value = 2 [
		if is-driver? own-driver [
			ifelse [type-of-driver] of own-driver = "taxi" [
				set history_taxi fput (ticks - last_status_change) history_taxi
				set services_type_history fput TAXI_CODE services_type_history
				;set history_uber fput 0 history_uber
			][
				if [type-of-driver] of own-driver = "uber" [
					set history_uber fput (ticks - last_status_change) history_uber
					set services_type_history fput UBER_CODE services_type_history
					;set history_taxi fput 0 history_taxi
				]
			]
		]
	]
	;set last_status_change date-and-time
	set state value
	set last_status_change ticks
end 
;-----------------------------
	
; ---------- this fn takes care of running the right assignment policy ------------
to assignment_policy_fn_persons
	ifelse choosing_customer_policy_code = "randomly" [
		randomly_policy_persons
	][
		if choosing_customer_policy_code = "fifo" [
			fifo_policy_persons
		]
	]
end

; ---------- randomly assignement policy for persons ----------
to randomly_policy_persons
	ask people with [state = 1] [
		let current_person self
		assignment_policy_fn_drivers current_person
	]
end

; ---------- fifo assignement policy for persons --------------
to fifo_policy_persons
	if not empty? sort people with [state = 1][
		foreach sort-on [last_status_change] people with [state = 1][
			[x] -> ask x [
				assignment_policy_fn_drivers x
			]
		]
	]
end
