;; FILE FOR PERSON'S FUNCTIONS

to person-act 
	if state = 0 [
		if random 100 < 1 [
			let current_position current_vertice
			; Changing his status
			set state 1
			set last_status_change date-and-time

			; Selecting a different vertice
			set destination one-of vertices with [self != current_position]
		]
	]
end

to get-in
	set state 2
	set last_status_change date-and-time
	hide-turtle
end

to get-out
	set state 0
	set last_status_change date-and-time
	set current_vertice destination
	move-to destination
	show-turtle
end
	
to assignment_policy_fn_persons
	ifelse choosing_customer_policy_code = "randomly" [
		randomly_policy_persons
	][
		if choosing_customer_policy_code = "fifo" [
			fifo_policy_persons
		]
	]
end

; ---------- randomly assignement policy for persons ----------
to randomly_policy_persons
	ask people with [state = 1] [
		let current_person self
		assignment_policy_fn_drivers current_person
	]
end

; ---------- fifo assignement policy for persons --------------
to fifo_policy_persons
	if not empty? sort people with [state = 1][
		foreach sort-on [last_status_change] people with [state = 1][
			[x] -> ask x [
				assignment_policy_fn_drivers x
			]
		]
	]
end
