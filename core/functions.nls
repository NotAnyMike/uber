; Setup function --------------------------------------------------------------------

to setup
  clear-all

	set total_ticks 10000

	setup-importer ; Import graph
	read_csv

  create-persons-fn ; Create turtle persons
  create-drivers-fn ; Create turtle driver

  reset-ticks
end

; Go function --------------------------------------------------------------------
to go
  if ticks = total_ticks [stop]

	calculate_time

	;; assign drivers to persons (for now choose any free driver randomly)
	assing-drivers

	ask people [
		person-act ; This is a function that define states of the turtle
	]

  ask drivers [
		driver-act ; This is a function that define states of the turtle
  ]

	ask drivers with [last_vertex = nobody] [
		print "last_vertex empty"
		print self
	]

  tick
end

; --------- creating turtles ----------

to create-persons-fn
  create-people number_of_people [
		set history_uber []
		set history_taxi []

    set shape "default"
    set color white
    set size 1
		span_from_gaussian_mixture 0 -1 gm_org
  ]
end

to create-drivers-fn
  create-drivers number_of_ubers [
    setxy random-xcor random-ycor
		let vertex-to-move min-one-of (vertices) [ distance myself ]
    set shape "circle 2"
    set color white
    set size 0.5
    set type-of-driver "uber"
		set state 2
		set path []
		set last_vertex vertex-to-move
    move-to  vertex-to-move
  ]

  create-drivers number_of_taxis [
    setxy random-xcor random-ycor
		let vertex-to-move min-one-of (vertices) [ distance myself ]
    set shape "circle 2"
    set color yellow
    set size 0.5
    set type-of-driver "taxi"
		set state 2
		set path []
		set last_vertex vertex-to-move
    move-to  vertex-to-move
  ]
end

; --------- movement function --------------
to go-towards [from-turtle to-turtle]
  ask from-turtle [
		let xcord [xcor] of to-turtle let ycord [ycor] of to-turtle

    ifelse distance to-turtle != 0 [

      set heading towards to-turtle

      ifelse abs(xcord - xcor) > 1 OR abs(ycord - ycor) > 1 [
        forward 1
      ][
        forward distance to-turtle
				move-to to-turtle
      ]
    ][move-to to-turtle]
  ]
end

; ------------ other functions -------------
to assing-drivers
	; for each person searching do 
	; decide which policy to use for choosing the person
	assignment_policy_fn_persons
end

; ------------ move through path function ------------
to move-in-path 
	; if path not empty
	ifelse not empty? path [
		ifelse distance item 0 path = 0 [
			; check if current vertex is item 0 nd if true delete
			set last_vertex item 0 path
			set path remove-item 0 path	
		][
			; else move
			go-towards self item 0 path
		]
	][print "empty"]
end
; ------- here starts dijkstra -------
to dijkstra [start_vertex end_vertex]

  ;initialization
  ask vertices [
    set expected-cost 1E50
    set visited? false
    set predecessor nobody
		set size 0.3
		set color white
  ]

	ask start_vertex [set expected-cost 0]

  let current_vertex start_vertex
  
	while [current_vertex != end_vertex][
		;create neighbors list
		ask current_vertex [
			ask in-edge-neighbors [
				;correct cost of each neighbor

				;calculte  new expected cost
				let new_cost [expected-cost] of current_vertex + [cost] of edge-with current_vertex

				;compare costs
				if expected-cost > new_cost[
					;set costs
					set expected-cost new_cost
					set predecessor current_vertex
				]
			]
		]

		;make current as visited
		ask current_vertex [set visited? true]

		;set current to the lowest of them all
		set current_vertex min-one-of vertices with [visited? = false] [expected-cost]
	]

	;reconstruct path
	let mypath fput end_vertex []
	let current_driver self
	ask end_vertex [ fill_path mypath current_driver	]

	;foreach path [ [x] -> ask x [set size 2]]
	;ask start_vertex [
		;set color blue
		;set size 4
	;]
	;ask end_vertex [
		;set color red
		;set size 4
	;]
end

to fill_path [mypath driver_agent]
	ifelse predecessor != nobody [
		set mypath fput predecessor mypath
		ask predecessor [fill_path mypath driver_agent]
	][
		ask driver_agent[
			set path mypath
		]
	]
end

; ------- here dijkstra finish -----

; ------- read distribution from csv -------
to read_csv
	; create list
	set gm_org []

	file-close-all
	file-open "distributions/org.csv"
	let data csv:from-row file-read-line
	while [not file-at-end?][
		let row csv:from-row file-read-line
		set gm_org lput row gm_org
	]
	file-close
end
; -----------------------------------------

; ------- span from gaussian mixture distribution --------

to span_from_gaussian_mixture [ n threshold dists ]
	if threshold = -1 [
		set threshold random-float 1
	]
	ifelse item 1 item n dists >= threshold [
		let mean_x item 3 item n dists
		let mean_y item 4 item n dists
		let std item 2 item n dists
		span_with_mean_and_std mean_x mean_y std
	][
		set n n + 1
		span_from_gaussian_mixture n threshold dists
	]
end

to span_with_mean_and_std [ mean_x mean_y std ]
	let xcord random-normal mean_x std
	let ycord random-normal mean_y std

	if xcord > max-x [set xcord max-x]
	if ycord > max-y [set ycord max-y]
	if xcord < 0 [set xcord 0]
	if ycord < 0 [set ycord 0]

	set xcor xcord
	set ycor ycord

	let vertex-to-move min-one-of (vertices) [ distance myself ]
	set current_vertice vertex-to-move
	move-to vertex-to-move
end
; -----------------------------------------------------------

; --------- TIME ----------
to calculate_time

	set time floor 24 * ticks / total_ticks

	; correct color_p based on time

	let color_p ceiling ( ticks / total_ticks * 150 + 100 )
	ask patches [
		set pcolor ( list color_p color_p color_p )
	]
end
; -------------------------
