; Setup function --------------------------------------------------------------------

to setup
  clear-all

	setup-importer

  create-persons-fn
  create-drivers-fn

  reset-ticks
end

; Go function --------------------------------------------------------------------
to go
  if ticks = 10000 [stop]

	;; assign drivers to persons (for now choose any free driver randomly)
	assing-drivers

	ask people [
		person-act
	]

  ask drivers [
		driver-act
  ]

  tick
end

; --------- creating turtles ----------

to create-persons-fn
  create-people number_of_people [
		let random_vertice one-of vertices
		set current_vertice random_vertice
		move-to random_vertice

		set history_uber []
		set history_taxi []

    set shape "default"
    set color white
    set size 1
  ]
end

to create-drivers-fn
  create-drivers number_of_ubers [
    setxy random-xcor random-ycor
    set shape "circle 2"
    set color white
    set size 0.5
    set type-of-driver "uber"
		set state 2
		set path []
    move-to  min-one-of (vertices) [ distance myself ]
  ]

  create-drivers number_of_taxis [
    setxy random-xcor random-ycor
    set shape "circle 2"
    set color yellow
    set size 0.5
    set type-of-driver "taxi"
		set state 2
		set path []
    move-to  min-one-of (vertices) [ distance myself ]
  ]
end

; --------- movement function --------------
to go-towards [from-turtle to-turtle]
  ask from-turtle [
let xcord [xcor] of to-turtle let ycord [ycor] of to-turtle

    ifelse distance to-turtle != 0 [

      set heading towards to-turtle

      ifelse abs(xcord - xcor) > 1 OR abs(ycord - ycor) > 1 [
        forward 1
      ][
        forward distance to-turtle
				move-to to-turtle
      ]
    ][move-to to-turtle]
  ]
end

; ------------ other functions -------------
to assing-drivers
	; for each person searching do 
	; decide which policy to use for choosing the person
	assignment_policy_fn_persons
end
